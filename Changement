#ANALYSE DE CHANGEMENT DES SOLS AU NEPAL
#AUTEUR: ALEX DE SA

#Import libraries

library (sp)
library (raster) 
library (rgdal)
library (rgeos)
library (viridis)
library (ggmap)
library (rasterVis)
library (maptools)
library (dplyr)
library (tidyr)
library (ggplot2)
library (gridExtra)
library (readxl)
library(xtable)

#Définition fichier source

setwd('C:/Users/INSTALL/Desktop/mini-projet/BD')

#Définition des couches sources

r1 <- raster(x = "C:/Users/INSTALL/Desktop/mini-projet/BD/LC_1990.tif")
r2 <- raster(x = "C:/Users/INSTALL/Desktop/mini-projet/BD/LC_2000.tif")
r3 <- raster(x = "C:/Users/INSTALL/Desktop/mini-projet/BD/LC_2010.tif")
districts <- raster(x = "C:/Users/INSTALL/Desktop/mini-projet/BD/districts_nepal.tif")
dem_geo <- raster(x = "C:/Users/INSTALL/Desktop/mini-projet/BD/geo_morf1.tif")

#vérification des propriétés générales rasters

compareRaster(r1, r2, r3, extent=TRUE, rowcol=TRUE, crs=TRUE, res=FALSE, orig=FALSE,
              rotation=TRUE, values=FALSE, tolerance=0, stopiffalse=TRUE, showwarning=FALSE)

print (r1)
print (r2)
print (r3)
print (districts)
print (dem_geo)

#Reamostrage des pixels 

r1_res <- resample(r1, districts, method="ngb", filename="r1_res", overwrite=TRUE)
r2_res <- resample(r2, districts, method="ngb", filename="r2_res", overwrite=TRUE)
r3_res <- resample(r3, districts, method="ngb", filename="r3_res", overwrite=TRUE)
dem_res <- resample(dem_geo, districts, method="ngb", filename="dem_res", overwrite=TRUE)

writeRaster(r1_res, filename="1990_resample.tif", format="GTiff", overwrite=TRUE)
writeRaster(r2_res, filename="2000_resample.tif", format="GTiff", overwrite=TRUE)
writeRaster(r3_res, filename="2010_resample.tif", format="GTiff", overwrite=TRUE)
writeRaster(dem_res, filename="Classes_geo_resample.tif", format="GTiff", overwrite=TRUE)

#Définition de l'extension de la zone d'étude

ext <- as(extent(80.06006, 88.20419, 26.34754, 30.44732), 'SpatialPolygons')

crs(ext) <- crs(r1_res)
r1_ext <- crop(r1_res, ext)
crs(ext) <- crs (r2_res)
r2_ext <- crop(r2_res, ext)
crs(ext) <- crs(r3_res)
r3_ext <- crop(r3_res, ext)
crs(ext) <- crs(dem_res)
dem_ext <- crop(dem_res, ext)
crs(ext) <- crs(districts)
dist_ext <- crop(districts, ext)

print (r1_ext)
print (r2_ext)
print (r3_ext)
print (dist_ext)
print (dem_ext)

writeRaster(r1_ext, filename="1990_ext.tif", format="GTiff", overwrite=TRUE)
writeRaster(r2_ext, filename="2000_ext.tif", format="GTiff", overwrite=TRUE)
writeRaster(r3_ext, filename="2010_ext.tif", format="GTiff", overwrite=TRUE)

#Création des "stacks"

stack1 <- stack(r1_ext, r2_ext, layers=NULL)
stack2 <- stack(r2_ext, r3_ext, layers=NULL)
stack3 <- stack(r1_ext, r3_ext, layers=NULL)
stack4 <- stack(r1_ext, dem_ext, layers=NULL)
stack5 <- stack(r2_ext, dem_ext, layers=NULL)
stack6 <- stack(r3_ext, dem_ext, layers=NULL)
stack7 <- stack(r1_ext, dist_ext, layers=NULL)
stack8 <- stack(r2_ext, dist_ext, layers=NULL)
stack9 <- stack(r3_ext, dist_ext, layers=NULL)

#Création des tableaux croisés

change1_2 <- crosstab(stack1, digits=0, long=FALSE, useNA=FALSE, progress='')
change2_3 <- crosstab(stack2, digits=0, long=FALSE, useNA=FALSE, progress='')
change1_3 <- crosstab(stack3, digits=0, long=FALSE, useNA=FALSE, progress='')
geo1990 <- crosstab(stack4, digits=0, long=FALSE, useNA=FALSE, progress='')
geo2000 <- crosstab(stack5, digits=0, long=FALSE, useNA=FALSE, progress='')
geo2010 <- crosstab(stack6, digits=0, long=FALSE, useNA=FALSE, progress='')
dist1990 <- crosstab(stack7, digits=0, long=FALSE, useNA=FALSE, progress='')
dist2000 <- crosstab(stack8, digits=0, long=FALSE, useNA=FALSE, progress='')
dist2010 <- crosstab(stack9, digits=0, long=FALSE, useNA=FALSE, progress='')

#Affichage de le table croisé - Changement entre classes

plot.new ()
grid.table(change1_2)
plot.new ()
grid.table(change2_3)
plot.new ()
grid.table(change1_3)
plot.new ()
grid.table(geo1990)
plot.new ()
grid.table(geo2000)
plot.new ()
grid.table(geo2010)
plot.new ()
grid.table(dist1990)
plot.new ()
grid.table(dist2000)
plot.new ()
grid.table(dist2010)

#Export CSV

write.csv(xtable(change1_2), "change1_2.csv")
write.csv(xtable(change2_3), "change2_3.csv")
write.csv(xtable(change1_3), "change1_3.csv")
write.csv(xtable(geo1990), "geochange1990.csv")
write.csv(xtable(geo2000), "geochange2000.csv")
write.csv(xtable(geo2010), "geo2010.csv")
write.csv(xtable(dist1990), "dist1990.csv")
write.csv(xtable(dist2000), "dist2000.csv")
write.csv(xtable(dist2010), "dist2010.csv")

#LULC - Analyse des changements

#Suppose two LULC rasters with 8 classes each one:

#Afin d’utiliser des processus aléatoires mais de faire en sorte qu’ils soient reproductibles dans le temps, est une fonction qui permet de fixer les résultats qui seront fournis par le RNG (random number generator).
set.seed(123)
lc1 <- setValues(r1_res, sample(1:8, 6051780, replace = T))
lc2 <- setValues(r2_res, sample(1:8, 6051780, replace = T))
lc3 <- setValues(r3_res, sample(1:8, 6051780, replace = T))

#To detect landcover changes, the basic approach is to using logical tests:
  
change1 <- lc1 != lc2
levelplot(change1)
writeRaster(change1, filename="Changement(1990-2000).tif", format="GTiff", overwrite=TRUE)

#Crosstab (classes geomorphologiques et districts)

cross_dem1 <- crosstab(dem_res, change1, digits=0, long=FALSE, useNA=FALSE, progress='')
cross_dist1 <- crosstab(dist_ext, change1, digits=0, long=FALSE, useNA=FALSE, progress='')

plot.new ()
grid.table(cross_dem1)

plot.new ()
grid.table(cross_dist1)

#Export CSV
write.csv(xtable(cross_dem1), "cross_dem1.csv")
write.csv(xtable(cross_dist1), "cross_dist1.csv")

#Changement 2 

change2 <- lc2 != lc3
levelplot(change2)
writeRaster(change2, filename="Changement(2000-2010).tif", format="GTiff", overwrite=TRUE)

#Crosstab (classes geomorphologiques et districts)

cross_dem2 <- crosstab(dem_res, change1, digits=0, long=FALSE, useNA=FALSE, progress='')
cross_dist2 <- crosstab(dist_ext, change2, digits=0, long=FALSE, useNA=FALSE, progress='')

write.csv(xtable(cross_dem2), "cross_dem2.csv")
write.csv(xtable(cross_dist2), "cross_dist2.csv")

# Le résultat est 1 lorsque les valeurs ne sont pas les mêmes (changement) et 0 lorsque sont les mêmes (pas de changement). Donc, dans ce cas, les deux rasters doivent être codifiés de la même manière.
#si vous avez besoin de savoir quelle classe a changé de quelle classe à quelle classe le changement a été effectué et ainsi de suite, vous devez créer un dictionnaire:
#Identifiez les classes, ajoutez une valeur de code et testez si la valeur de code est un changement de classe ou s'il reste une classe:

lc1_uniq <- unique(lc1)
lc2_uniq <- unique(lc2)
lc3_uniq <- unique(lc3)

grid_ <- expand.grid(lc1_uniq,lc2_uniq)
names(grid_) <- c('1','8')
grid_$code <- 1:dim(grid_)[1]
grid_$change <- grid_[,1] != grid_[,2]

head(grid_)

#  from to code change
#1    1  1    1  FALSE
#2    2  1    2   TRUE
#3    3  1    3   TRUE
#4    4  1    4   TRUE
#5    5  1    5   TRUE
#6    6  1    6   TRUE
#7    7  1    7   TRUE
#8    8  1    8   TRUE

grid_1 <- expand.grid(lc2_uniq,lc3_uniq)
names(grid_1) <- c('1','8')
grid_1$code1 <- 1:dim(grid_1)[1]
grid_1$change1 <- grid_1[,1] != grid_1[,2]

head(grid_1)

#Pour d'autres types de questions comme «passer de la classe 1 à la classe 2», la procédure est la même:
  
change3 <- (lc1 == 1) & (lc2 == 2)
levelplot(change3)
writeRaster(change2, filename="Changement1(From1_2).tif", format="GTiff", overwrite=TRUE)

change4 <- (lc2 == 1) & (lc3 == 2)
levelplot(change3)
writeRaster(change2, filename="Changement2(From1_2).tif", format="GTiff", overwrite=TRUE)

#As you know, logical tests are 1 when is true and 0 when is false:
  
levelplot(stack(change1, change3))
levelplot(stack(change2, change4))

#Then, create a function to apply dictionary code values:
  
fun_change <- function(x){
    grid_[x[1] == grid_[,1] & x[2] == grid_[,2],'code']
  }

#And finally, apply the function:
  
change5 <- calc(stack(lc1,lc2), fun = fun_change)

plot(change5)
writeRaster(change5, filename="Changement5.tif", format="GTiff", overwrite=TRUE)

change6 <- calc(stack(lc2,lc3), fun = fun_change)
plot(change6)
writeRaster(change6, filename="Changement6.tif", format="GTiff", overwrite=TRUE)

#In this case, for a pixel's value of 8 means that the original class was 8 and now is 1.

#Class representation (only change detection)

# Create legend labels

codes_ <- data.frame(ID = grid_$code,value = paste0('from ',grid_[,1],' to ',grid_[,2]))
logical_test <- which(grid_$change == T) 
codes_ <- codes_[logical_test,]

# Create a Raster Attribute Table

rat <- levels(change5)[[1]]
rat[["Changes"]] <- codes_
levels(change5) <- rat

rat2 <- levels(change6)[[1]]
rat2[["Changes"]] <- codes_
levels(change6) <- rat

# Plot

LUCC1 <- levelplot(change5, par.settings=PuOrTheme(), xlab="", ylab="")
LUCC2 <- levelplot(change6, par.settings=PuOrTheme(), xlab="", ylab="")

#crosstab - Changement (classes geomorphologiques et districts)

change_geo <- crosstab(dem_res, changement1, digits=0, long=FALSE, useNA=FALSE, progress='')
plot.new ()
grid.table(change5_geo)
write.csv(xtable(change5_geo), "changement(1990-2000)_geomorphologie.csv")

change5_dist <- crosstab(dist_ext, change5, digits=0, long=FALSE, useNA=FALSE, progress='')
plot.new ()
grid.table(change5_dist)
write.csv(xtable(change5_dist), "changement(1990-2000)_district.csv")

change6_geo <- crosstab(dem_res, change6, digits=0, long=FALSE, useNA=FALSE, progress='')
plot.new ()
grid.table(change6)
write.csv(xtable(change6_geo), "changement(2000-2010)_geomorphologie.csv")

change6_dist <- crosstab(dist_ext, change6, digits=0, long=FALSE, useNA=FALSE, progress='')
plot.new ()
grid.table(change6_dist)
write.csv(xtable(change6_dist), "changement(2000-2010)_district.csv")
          
